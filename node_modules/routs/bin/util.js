const _ = require('lodash');

exports.createLiteral = value => ({
  type: 'Literal',
  value,
  raw: `'${value}'`,
});

exports.createCommnet = (value, type = 'Line') => [
  { type, value: ` ${value}` },
];

exports.defRequire = pack => ({
  type: 'ExpressionStatement',
  expression: {
    type: 'CallExpression',
    callee: {
      type: 'Identifier',
      name: 'require',
    },
    arguments: [exports.createLiteral(pack)],
  },
});

exports.base = () => ({
  type: 'Program',
  body: [],
  sourceType: 'module',
});

exports.splitPath = (path) => {
  const rs = { exp: [], qur: [] };
  const ps = path.split('/');
  let exp = [];
  const len = ps.length;
  ps.forEach((p, inx) => {
    if (p.length > 1 && p.charAt(0) === ':') {
      rs.exp.push(p.substring(1));
      if (exp[0] !== '') {
        exp.unshift('');
      }
      rs.qur.push(`${exp.join('/')}/`);
      exp = [];
    } else {
      exp.push(p);
    }
  });
  if (exp.length) {
    if (exp[0] !== '') {
      exp.unshift('');
    }
    rs.qur.push(exp.join('/'));
  }
  if (rs.exp.length && rs.exp.length === rs.qur.length) {
    rs.qur.push('');
  }
  return rs;
};

exports.parseParams = (path) => {
  const ps = path.split('/');
  const rs = [];
  for (const p of ps) {
    if (p.length > 1 && p.charAt(0) === ':') {
      rs.push(p.substring(1));
    }
  }
  return rs;
};

const _parse = (route, parent) => {
  const { alias, desc, routes } = route;
  let path = route.path;
  if (path === '/') {
    path = '';
  }
  if (!alias && !routes) {
    return null;
  }
  const method = route.method || 'get';
  if (routes) {
    const rs = [];
    for (const rout of routes) {
      const rc = _parse(rout, `${parent}${path}`);
      if (_.isArray(rc)) {
        rs.push(...rc);
      } else if (rc) {
        rs.push(rc);
      }
    }
    return rs;
  }
  if (path === '/') {
    return {
      path: parent,
      alias,
      desc,
      method,
    };
  }
  return {
    path: `${parent}${path}`,
    alias,
    desc,
    method,
  };
};
const FILE_DESC = `\n* generated by routs\n* author: sankooc\n* ts: ${new Date()}\n`;

exports.parseRoute = (route) => {
  const rs = _parse(route, '');
  const keys = rs.map(r => r.alias);
  const swap = _.zipObjectDeep(keys, rs);
  return Object.keys(swap).map(name => ({
    desc: FILE_DESC,
    name,
    routes: Object.keys(swap[name]).map(alias => ({
      alias,
      desc: swap[name][alias].desc,
      path: swap[name][alias].path,
      method: swap[name][alias].method,
    })),
  }));
};
